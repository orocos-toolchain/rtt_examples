<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "cpf.dtd">
<properties>

  <!-- Structure of this file:
  
     |-  Component 1
     |     |- Property file
     |     |- Activity info
     |     |- Peer connections
     |     |- Port connections
     |     \- Scripts to load
     ...

     In Order to complete this exercise, have the Deployment Component
     Manual as a reference alongside this file.
  -->
 
  <!-- Exercise: Add an 'Import' statement such that the deployer
       looks for components of the current ("hello-7-deployment") package.
       NOTE: in non-ROS environments, a "make install" is required before
			 the current package can be imported.

       Then start the deployer with ('gnulinux'):
       $ deployer-gnulinux -linfo -s application.xml

       And check with displayComponentTypes() that at least the Example::World
       component type could be found. If the Example::Hello component was not found,
       check that Hello.cpp contains the necessary C macro and recompile that file.

       Also, you should then notice that a 'World' component is loaded but unconfigured.
       If this works, you can continue with the exercise below.
  -->
  <simple name="Import" type="string"><value>hello-7-deployment</value></simple>

  <!-- Exercise: Create an instance of the "Example::Hello" type of component
       and name it "Hello". Assign it an "Activity" of type "PeriodicActivity"
       with a "Period" of 0.1, a "Priority" of 0 and as "Scheduler" the
       real-time ORO_SCHED_RT.

       Next, set "AutoConf" and "AutoStart" to 1 in order to configure and
       start this component during a 'kick-start'.

       Add the "World" component as a "Peer" of this component and
       vice versa.

       Connect the ports of the World Component with this component.
       In order to do this, create a connection "HelloDataConnection"
       and add hello's outport and world's inport to that connection and a connection
       "HelloBufferConnection" with hello's inport and world's outport. (See also
	   the World component below).

       Finally, instruct the deployer to read the properties from 
       a property file 'Hello.cpf'

       -->
  <struct name="HelloDataConnection" type="ConnPolicy">
  </struct>
  <struct name="HelloBufferConnection" type="ConnPolicy">
  </struct>


  <struct name="Hello" type="Example::Hello">
    <struct name="Activity" type="Activity">
      <simple name="Priority" type="short"><value>0</value></simple>
      <simple name="Period" type="double"><value>0.1</value></simple>
      <simple name="Scheduler" type="string"><value>ORO_SCHED_RT</value></simple>
    </struct>
    <struct name="Peers" type="PropertyBag">
      <simple type="string"><value>World</value></simple>
    </struct>
    <struct name="Ports" type="PropertyBag">
      <simple name="outport" type="string"><value>HelloDataConnection</value></simple>
      <simple name="inport" type="string"><value>HelloBufferConnection</value></simple>
    </struct>
    <simple name="AutoConf" type="boolean"><value>1</value></simple>
    <simple name="AutoStart" type="boolean"><value>1</value></simple>
  </struct>
  <!-- Exercise: Give the World component a SequentialActivity. -->
       
  <!-- You must extend the World component likewise as the Hello component
       above in order to have the application fully functional.
       -->
  <struct name="World" type="Example::World">
    <struct name="Activity" type="Activity">
      <simple name="Priority" type="short"><value>0</value></simple>
      <simple name="Scheduler" type="string"><value>ORO_SCHED_RT</value></simple>
    </struct>
  <simple name="AutoConf" type="boolean"><value>1</value></simple>
  <simple name="AutoStart" type="boolean"><value>1</value></simple>
    <struct name="Peers" type="PropertyBag">
      <simple type="string"><value>Hello</value></simple>
    </struct>
    <struct name="Ports" type="PropertyBag">
      <simple name="outport" type="string"><value>HelloBufferConnection</value></simple>
      <simple name="inport" type="string"><value>HelloDataConnection</value></simple>
    </struct>
  </struct>
</properties>
